version: "3"
services:
  frontend:
    container_name: app_frontend
    build: ./frontend
    ports:
      - 3000:3000
    depends_on:
      backend:
        condition: service_healthy
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  backend:
  # Serviço que irá rodar o node
  node:
    # Imagem base do container
    image: node:16
    # Nome do container para facilitar execução
    container_name: ecommerce_pmcapital
    # Mesmo que `docker run -t`
    tty: true
    # Mesmo que `docker run -i`
    stdin_open: true
    # Substitui o comando padrão da imagem do node
    command: bash
    # Restarta a imagem caso algo a faça parar
    restart: always
    # Diretório padrão de execução
    working_dir: /app
    # Lista de volumes (diretórios) mapeados de fora para dentro do container
    volumes:
      # Monta o diretório atual, com todos os dados do projeto, 
      # dentro do diretório /app
      - ./:/app
    # Lista de serviços do qual este serviço depende
    depends_on:
      db:
        condition: service_healthy
    # Lista de portas mapeadas de dentro para fora do container
    # na notação porta_de_fora:porta_de_dentro
    ports:
      # Expõe a porta padrão da aplicação: altere aqui caso use outra porta
      - 3001:3001
    environment:
      - PORT=3001
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - DB_USER=root
      - DB_PASS=123456
      - DB_HOST=db
      - DB_NAME=e-commerce
      - DB_PORT=3306
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5

  # Serviço que irá rodar o mysql
  db:
    image: mysql:8.0.21
    container_name: db
    ports:
      - 3002:3306
    # Garanta que não haverá conflitos de porta com um mysql que esteja
    # rodando localmente
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    # restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 20s
      retries: 10
    cap_add:
      - SYS_NICE # Deve omitir alertas menores

# Lista de redes que os containeres irão utilizar
networks:
  # Rede padrão, criada automaticamente
  default:
    # Dá um nome específico à rede padrão
    name: ecommerce_net

# As chaves `tty`, `stdin_open` e `command` fazem com que o container fique
# rodando em segundo plano, bem como tornam possível o uso do comando
# `docker attach`, já deixando o terminal atual acoplado ao container, direto
# no bash. Apesar disso, utilizar o attach mais de uma vez irá replicar o
# terminal, portanto é melhor utilizar o comando `docker exec`.

# A renomeação da rede padrão é feita pois caso contrário o nome da rede será
# o nome do diretório onde o arquivo atual se encontra, o que pode dificultar
# a listagem individual.
